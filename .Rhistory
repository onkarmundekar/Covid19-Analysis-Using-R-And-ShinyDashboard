) %>% replace_na(list(act_value = 0, ref_value = 0))
},
get_corrected_cases_plot_data = function () {
c_count <- tibble(
cases = private$cases %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$cases)-4)
) %>% filter(private$d_cases_act) %>% mutate(potential_cases = private$potential_cases)
},
get_country_plot_data = function (country, case_cutoff = 0) {
c_count <- tibble(
cases = private$cases %>% filter(`Country/Region` == country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$cases)-4)
)
c_count_cutoff <- c_count$cases > case_cutoff
c_deaths <- tibble(
deaths = private$deaths %>% filter(`Country/Region` == country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$deaths)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$deaths)-4)
)
c_recovered <- tibble(
recovered = private$recovered %>% filter(`Country/Region` == country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$recovered)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$recovered)-4)
)
return(
left_join(c_count[c_count_cutoff, ], c_deaths[c_count_cutoff, ], by = "date") %>% left_join(c_recovered[c_count_cutoff, ], by = "date")
)
},
stat_fix = function (
death_fix_loc = 5, death_fix_sh = 5, death_fix_sc = 1, death_fix_type = "normal", death_sampling = 1000,
cases_fix_loc = 5, cases_fix_sh = 5, cases_fix_sc = 1, cases_fix_type = "normal", cases_sampling = 1000
) {
if (death_fix_type == "normal") {
death_fix_prior <- rnorm(death_sampling, death_fix_loc, death_fix_sc)
} else if (death_fix_type == "gamma") {
death_fix_prior <- rgamma(death_sampling, death_fix_sh, death_fix_sc)
}
private$death_orig <- tibble(
value = private$deaths %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
day_date = colnames(private$deaths)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,# as.POSIXct,
day = 1:(ncol(private$deaths)-4)
) %>% filter(value >= private$death_cutoff)
private$corrected_death <- private$death_orig %>% select(day_date, day) %>% bind_cols(outer(private$death_orig$value, death_fix_prior) %>% as_tibble) %>% gather(key = "junk", value = "value", -day_date, -day) %>% select(-junk)
if (cases_fix_type == "normal") {
cases_fix_prior <- rnorm(cases_sampling, cases_fix_loc, cases_fix_sc)
} else if (cases_fix_type == "gamma") {
cases_fix_prior <- rgamma(cases_sampling, cases_fix_sh, cases_fix_sc)
}
private$cases_orig <- tibble(
value = private$cases %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
day_date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,# as.POSIXct,
day = 1:(ncol(private$cases)-4)
) %>% filter(private$d_cases_act) %>% mutate(potential_cases = private$potential_cases)
private$corrected_cases <- private$cases_orig %>% select(day_date, day) %>% bind_cols(outer(private$cases_orig$potential_cases, cases_fix_prior) %>% as_tibble) %>% gather(key = "junk", value = "value", -day_date, -day) %>% select(-junk)
},
get_cases_stat_fix_plot_data = function () {
private$corrected_cases %>% group_by(day_date) %>% summarize(value_mean = mean(value), value_sd = sd(value), value_median = median(value), value_025 = quantile(value, 0.025), value_975 = quantile(value, 0.975)) %>% ungroup %>% inner_join(private$cases_orig, by = "day_date")
},
get_death_stat_fix_plot_data = function () {
private$corrected_death %>% group_by(day_date) %>% summarize(value_mean = mean(value), value_sd = sd(value), value_median = median(value), value_025 = quantile(value, 0.025), value_975 = quantile(value, 0.975)) %>% ungroup %>% inner_join(private$death_orig, by = "day_date")
}
), private = list(
cases = NULL,
deaths = NULL,
recovered = NULL,
demo = NULL,
death_cutoff = NULL,
active_country = NULL,
reference_country = NULL,
dr_act = NULL,
d_cases_act = NULL,
dr_ref = NULL,
d_cases_ref = NULL,
demo_act = NULL,
demo_ref = NULL,
vulnerable_act = NULL,
vulnerable_ref = NULL,
v_act = NULL,
v_ref = NULL,
scaling_factor = NULL,
potential_cases = NULL,
death_orig = NULL,
corrected_death = NULL,
cases_orig = NULL,
corrected_cases = NULL,
read_data = function () {
confirmed_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
private$cases <- read_csv(confirmed_url) %>% mutate(`Country/Region` = `Country/Region` %>% str_replace("Iran (Islamic Republic of)", "Iran") %>% str_replace("Taiwan*", "Taiwan") %>% str_replace("Cruise Ship", "Diamond Princess") %>% str_replace("Korea, South", "South Korea") %>% str_replace("US", "USA"))
private$deaths <- read_csv(deaths_url) %>% mutate(`Country/Region` = `Country/Region` %>% str_replace("Iran (Islamic Republic of)", "Iran") %>% str_replace("Taiwan*", "Taiwan") %>% str_replace("Cruise Ship", "Diamond Princess") %>% str_replace("Korea, South", "South Korea") %>% str_replace("US", "USA"))
private$recovered <- read_csv(recovered_url) %>% mutate(`Country/Region` = `Country/Region` %>% str_replace("Iran (Islamic Republic of)", "Iran") %>% str_replace("Taiwan*", "Taiwan") %>% str_replace("Cruise Ship", "Diamond Princess") %>% str_replace("Korea, South", "South Korea") %>% str_replace("US", "USA"))
self$countries <- private$cases %>% pull(`Country/Region`) %>% unique %>% sort
private$demo <- read_csv("C:/Users/munde/Documents/c19shinyfinal/kaggle/input/world_demographics.csv", col_types = cols(`Value Footnotes` = col_character())) %>% mutate(`Country or Area` = `Country or Area` %>% str_replace("Viet Nam", "Vietnam") %>% str_replace("United States of America", "USA") %>% str_replace("United Kingdom of Great Britain and Northern Ireland", "United Kingdom") %>% str_replace("Republic of Korea", "South Korea") %>% str_replace("Venezuela (Bolivarian Republic of)", "Venezuela") %>% str_replace("Iran (Islamic Republic of)", "Iran"))
}
))
shiny::runApp()
private$demo <- read_csv("C:/Users/munde/Documents/BIDMiniProject/world_demographics.csv", col_types = cols(`Value Footnotes` = col_character())) %>% mutate(`Country or Area` = `Country or Area` %>% str_replace("Viet Nam", "Vietnam") %>% str_replace("United States of America", "USA") %>% str_replace("United Kingdom of Great Britain and Northern Ireland", "United Kingdom") %>% str_replace("Republic of Korea", "South Korea") %>% str_replace("Venezuela (Bolivarian Republic of)", "Venezuela") %>% str_replace("Iran (Islamic Republic of)", "Iran"))
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
Corrector <- R6::R6Class("Corrector", public = list(
countries = NULL,
initialize = function () {
private$read_data()
},
new_correction = function (active_country = "China", reference_country = "South Korea", death_cutoff = 3) {
private$death_cutoff <- death_cutoff
private$active_country <- active_country
private$reference_country <- reference_country
c1_count <- private$cases %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist
c1_deaths <- private$deaths %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist
private$dr_act <- c1_deaths / c1_count
private$d_cases_act <- c1_deaths > death_cutoff
c0_count <- private$cases %>% filter(`Country/Region` == private$reference_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist
c0_deaths <- private$deaths %>% filter(`Country/Region` == private$reference_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist
private$dr_ref <- c0_deaths / c0_count
private$d_cases_ref <- c0_deaths > death_cutoff
private$demo_act <- private$demo %>% mutate(Age = Age %>% as.integer) %>% filter(`Country or Area` == private$active_country) %>% filter(Year == max(Year), !is.na(Age))
private$demo_ref <- private$demo %>% mutate(Age = Age %>% as.integer) %>% filter(`Country or Area` == private$reference_country) %>% filter(Year == max(Year), !is.na(Age))
# print("private$demo_act")
# print(private$demo_act)
# print("private$demo_ref")
# print(private$demo_ref)
private$vulnerable_act <- private$demo_act %>%
mutate(vul = case_when(
Age < 30 ~ 0,
Age >= 30 & Age < 40 ~ Value * 0.0011,
Age >= 40 & Age < 50 ~ Value * 0.0009,
Age >= 50 & Age < 60 ~ Value * 0.0037,
Age >= 60 & Age < 70 ~ Value * 0.0151,
Age >= 70 & Age < 80 ~ Value * 0.0535,
Age >= 80 ~ Value * 0.1084
))
private$vulnerable_ref <- private$demo_ref %>%
mutate(vul = case_when(
Age < 30 ~ 0,
Age >= 30 & Age < 40 ~ Value * 0.0011,
Age >= 40 & Age < 50 ~ Value * 0.0009,
Age >= 50 & Age < 60 ~ Value * 0.0037,
Age >= 60 & Age < 70 ~ Value * 0.0151,
Age >= 70 & Age < 80 ~ Value * 0.0535,
Age >= 80 ~ Value * 0.1084
))
private$v_act <- sum(private$vulnerable_act$vul) / sum(private$demo_act %>% pull(Value))
private$v_ref <- sum(private$vulnerable_ref$vul) / sum(private$demo_ref %>% pull(Value))
# print("private$v_act")
# print(private$v_act)
# print("private$v_ref")
# print(private$v_ref)
exp_diff <- private$v_act / private$v_ref
# print("exp_diff")
# print(exp_diff)
private$scaling_factor <- private$dr_act[private$d_cases_act] / (exp_diff * sum(private$dr_ref[private$d_cases_ref]) / length(private$d_cases_ref))
# print("private$scaling_factor")
# print(private$scaling_factor)
private$potential_cases <- c1_count[private$d_cases_act] * private$scaling_factor
# print("private$potential_cases")
# print(private$potential_cases)
},
compare_deathrates = function (active_country = private$active_country, reference_country = private$reference_country) {
## Here using orphaned functione parameters for function triggering anytime Shiny settings are updated
inner_join(
tibble(
dr_act = private$dr_act * 100,
date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date
) %>% filter(private$d_cases_act),
tibble(
dr_ref = private$dr_ref * 100,
date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date
) %>% filter(private$d_cases_ref),
by = "date"
)
},
compare_demo = function (active_country = private$active_country, reference_country = private$reference_country) {
## Here using orphaned functione parameters for function triggering anytime Shiny settings are updated
full_join(
private$demo_act %>% select(Age, act_value = Value),
private$demo_ref %>% select(Age, ref_value = Value),
by = "Age"
) %>% replace_na(list(act_value = 0, ref_value = 0))
},
compare_vuln_demo = function (active_country = private$active_country, reference_country = private$reference_country) {
## Here using orphaned functione parameters for function triggering anytime Shiny settings are updated
full_join(
private$vulnerable_act %>% select(Age, act_vul = vul),
private$vulnerable_ref %>% select(Age, ref_vul = vul),
by = "Age"
) %>% replace_na(list(act_value = 0, ref_value = 0))
},
get_corrected_cases_plot_data = function () {
c_count <- tibble(
cases = private$cases %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$cases)-4)
) %>% filter(private$d_cases_act) %>% mutate(potential_cases = private$potential_cases)
},
get_country_plot_data = function (country, case_cutoff = 0) {
c_count <- tibble(
cases = private$cases %>% filter(`Country/Region` == country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$cases)-4)
)
c_count_cutoff <- c_count$cases > case_cutoff
c_deaths <- tibble(
deaths = private$deaths %>% filter(`Country/Region` == country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$deaths)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$deaths)-4)
)
c_recovered <- tibble(
recovered = private$recovered %>% filter(`Country/Region` == country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
date = colnames(private$recovered)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,
day = 1:(ncol(private$recovered)-4)
)
return(
left_join(c_count[c_count_cutoff, ], c_deaths[c_count_cutoff, ], by = "date") %>% left_join(c_recovered[c_count_cutoff, ], by = "date")
)
},
stat_fix = function (
death_fix_loc = 5, death_fix_sh = 5, death_fix_sc = 1, death_fix_type = "normal", death_sampling = 1000,
cases_fix_loc = 5, cases_fix_sh = 5, cases_fix_sc = 1, cases_fix_type = "normal", cases_sampling = 1000
) {
if (death_fix_type == "normal") {
death_fix_prior <- rnorm(death_sampling, death_fix_loc, death_fix_sc)
} else if (death_fix_type == "gamma") {
death_fix_prior <- rgamma(death_sampling, death_fix_sh, death_fix_sc)
}
private$death_orig <- tibble(
value = private$deaths %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
day_date = colnames(private$deaths)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,# as.POSIXct,
day = 1:(ncol(private$deaths)-4)
) %>% filter(value >= private$death_cutoff)
private$corrected_death <- private$death_orig %>% select(day_date, day) %>% bind_cols(outer(private$death_orig$value, death_fix_prior) %>% as_tibble) %>% gather(key = "junk", value = "value", -day_date, -day) %>% select(-junk)
if (cases_fix_type == "normal") {
cases_fix_prior <- rnorm(cases_sampling, cases_fix_loc, cases_fix_sc)
} else if (cases_fix_type == "gamma") {
cases_fix_prior <- rgamma(cases_sampling, cases_fix_sh, cases_fix_sc)
}
private$cases_orig <- tibble(
value = private$cases %>% filter(`Country/Region` == private$active_country) %>% group_by(`Country/Region`) %>% select(-c(1:4)) %>% summarise_all(sum) %>% ungroup %>% select(-1) %>% unlist,
day_date = colnames(private$cases)[-c(1:4)] %>% strptime("%m/%d/%y") %>% as.Date,# as.POSIXct,
day = 1:(ncol(private$cases)-4)
) %>% filter(private$d_cases_act) %>% mutate(potential_cases = private$potential_cases)
private$corrected_cases <- private$cases_orig %>% select(day_date, day) %>% bind_cols(outer(private$cases_orig$potential_cases, cases_fix_prior) %>% as_tibble) %>% gather(key = "junk", value = "value", -day_date, -day) %>% select(-junk)
},
get_cases_stat_fix_plot_data = function () {
private$corrected_cases %>% group_by(day_date) %>% summarize(value_mean = mean(value), value_sd = sd(value), value_median = median(value), value_025 = quantile(value, 0.025), value_975 = quantile(value, 0.975)) %>% ungroup %>% inner_join(private$cases_orig, by = "day_date")
},
get_death_stat_fix_plot_data = function () {
private$corrected_death %>% group_by(day_date) %>% summarize(value_mean = mean(value), value_sd = sd(value), value_median = median(value), value_025 = quantile(value, 0.025), value_975 = quantile(value, 0.975)) %>% ungroup %>% inner_join(private$death_orig, by = "day_date")
}
), private = list(
cases = NULL,
deaths = NULL,
recovered = NULL,
demo = NULL,
death_cutoff = NULL,
active_country = NULL,
reference_country = NULL,
dr_act = NULL,
d_cases_act = NULL,
dr_ref = NULL,
d_cases_ref = NULL,
demo_act = NULL,
demo_ref = NULL,
vulnerable_act = NULL,
vulnerable_ref = NULL,
v_act = NULL,
v_ref = NULL,
scaling_factor = NULL,
potential_cases = NULL,
death_orig = NULL,
corrected_death = NULL,
cases_orig = NULL,
corrected_cases = NULL,
read_data = function () {
confirmed_url <- "C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_confirmed_global.csv"
deaths_url <-"C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_deaths_global.csv"
recovered_url <- "C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_recovered_global.csv"
private$cases <- read_csv(confirmed_url) %>% mutate(`Country/Region` = `Country/Region` %>% str_replace("Iran (Islamic Republic of)", "Iran") %>% str_replace("Taiwan*", "Taiwan") %>% str_replace("Cruise Ship", "Diamond Princess") %>% str_replace("Korea, South", "South Korea") %>% str_replace("US", "USA"))
private$deaths <- read_csv(deaths_url) %>% mutate(`Country/Region` = `Country/Region` %>% str_replace("Iran (Islamic Republic of)", "Iran") %>% str_replace("Taiwan*", "Taiwan") %>% str_replace("Cruise Ship", "Diamond Princess") %>% str_replace("Korea, South", "South Korea") %>% str_replace("US", "USA"))
private$recovered <- read_csv(recovered_url) %>% mutate(`Country/Region` = `Country/Region` %>% str_replace("Iran (Islamic Republic of)", "Iran") %>% str_replace("Taiwan*", "Taiwan") %>% str_replace("Cruise Ship", "Diamond Princess") %>% str_replace("Korea, South", "South Korea") %>% str_replace("US", "USA"))
self$countries <- private$cases %>% pull(`Country/Region`) %>% unique %>% sort
private$demo <- read_csv("C:/Users/munde/Documents/BIDMiniProject/world_demographics.csv", col_types = cols(`Value Footnotes` = col_character())) %>% mutate(`Country or Area` = `Country or Area` %>% str_replace("Viet Nam", "Vietnam") %>% str_replace("United States of America", "USA") %>% str_replace("United Kingdom of Great Britain and Northern Ireland", "United Kingdom") %>% str_replace("Republic of Korea", "South Korea") %>% str_replace("Venezuela (Bolivarian Republic of)", "Venezuela") %>% str_replace("Iran (Islamic Republic of)", "Iran"))
}
))
library(shiny)
library(plotly)
source("C:/Users/munde/Documents/BIDMiniProject/corrector.R")
covid_cor <- Corrector$new()
ui <- fluidPage(
## Application title
titlePanel("COVID-19 Case & Death Report Number Corrector"),
br(),
sidebarLayout(
## Sidebar -------------------------------------------------------------- ##
sidebarPanel(
selectInput("act_country", "Country to correct", covid_cor$countries, "USA"),
selectInput("ref_country", "Reference country", covid_cor$countries, "South Korea"),
br(),
),
## ---------------------------------------------------------------------- ##
# Show a plot of the generated distribution
mainPanel(
br(),
fluidRow(
column(6,
plotlyOutput("act_country_plot")
),
column(6,
plotlyOutput("ref_country_plot")
)
),
br(), br(),
fluidRow(
column(6,
plotlyOutput("corrected_cases_plot")
),
column(6,
plotlyOutput("dr_plot")
)
),
br(), br(),
fluidRow(
column(6,
plotlyOutput("stats_fixed_cases_plot")
),
column(6,
plotlyOutput("stats_fixed_death_plot")
)
),
br(), br(),
fluidRow(
column(6,
plotlyOutput("demo_plot")
),
column(6,
plotlyOutput("demo_death_plot")
)
),
br(), br()
)
)
)
# Define server logic required to draw the plots
server <- function(input, output) {
output$act_country_plot <- renderPlotly({
covid_cor$get_country_plot_data(input$act_country) %>%
plot_ly(x = ~date, y = ~cases, type = "scatter", mode = "lines+markers", color = I("dark green"), name = "Cases") %>%
add_trace(x = ~date, y = ~recovered, type = "scatter", mode = "lines+markers", color = I("blue"), name = "Recovered") %>%
add_trace(x = ~date, y = ~deaths, type = "scatter", mode = "lines+markers", color = I("red"), name = "Deaths", yaxis = "y2") %>%
layout(title = list(text = input$act_country), yaxis2 = list(overlaying = "y", side = "right", automargin = T), yaxis = list(title = "Cumulative Report Number"), xaxis = list(title = "Date"), legend = list(x = 0.05, y = 0.95))
})
output$ref_country_plot <- renderPlotly({
covid_cor$get_country_plot_data(input$ref_country) %>%
plot_ly(x = ~date, y = ~cases, type = "scatter", mode = "lines+markers", color = I("dark green"), name = "Cases") %>%
add_trace(x = ~date, y = ~recovered, type = "scatter", mode = "lines+markers", color = I("blue"), name = "Recovered") %>%
add_trace(x = ~date, y = ~deaths, type = "scatter", mode = "lines+markers", color = I("red"), name = "Deaths", yaxis = "y2") %>%
layout(title = list(text = paste0(input$ref_country, " (as reference)")), yaxis2 = list(overlaying = "y", side = "right", automargin = T), yaxis = list(title = "Cumulative Report Number"), xaxis = list(title = "Date"), legend = list(x = 0.05, y = 0.95))
})
output$corrected_cases_plot <- renderPlotly({
covid_cor$new_correction(active_country = input$act_country, reference_country = input$ref_country)
covid_cor$get_corrected_cases_plot_data() %>%
plot_ly(x = ~date, y = ~cases, type = "scatter", mode = "lines+markers", color = I("dark green"), name = "Cases") %>%
add_trace(x = ~date, y = ~potential_cases, type = "scatter", mode = "lines+markers", color = I("light green"), name = "Adj. Cases") %>%
layout(title = list(text = paste0(input$act_country, " Cases (Adj. via ", input$ref_country, ")")), yaxis = list(title = "Cumulative Report Number"), xaxis = list(title = "Date"), legend = list(x = 0.05, y = 0.95))
})
output$dr_plot <- renderPlotly({
covid_cor$compare_deathrates(active_country = input$act_country, reference_country = input$ref_country) %>%
plot_ly(x = ~date, y = ~dr_ref, type = "scatter", mode = "lines+markers", color = I("grey"), name = input$ref_country) %>%
add_trace(x = ~date, y = ~dr_act, type = "scatter", mode = "lines+markers", color = I("red"), name = input$act_country) %>%
layout(title = list(text = paste0("Death Rate Comparison: ", input$act_country, " & ", input$ref_country)), yaxis = list(title = "Death Rate"), xaxis = list(title = "Date"), showlegend = F)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
confirmedraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_confirmed_global.csv")
deathsraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_deaths_global.csv")
recoveredraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_recovered_global.csv")
library(tidyr)
library(dplyr)
confirmed <- confirmedraw %>% gather(key="date", value="confirmed", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(confirmed=sum(confirmed))
deaths <- deathsraw %>% gather(key="date", value="deaths", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(deaths=sum(deaths))
recovered <- recoveredraw %>% gather(key="date", value="recovered", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(recovered=sum(recovered))
summary(confirmed)
country <- full_join(confirmed, deaths) %>% full_join(recovered)
country$date <- country$date %>% sub("X", "", .) %>% as.Date("%m.%d.%y")
# Create new variable: number of days
country <- country %>% group_by(Country.Region) %>% mutate(cumconfirmed=cumsum(confirmed), days = date - first(date) + 1)
world <- country %>% group_by(date) %>% summarize(confirmed=sum(confirmed), cumconfirmed=sum(cumconfirmed), deaths=sum(deaths), recovered=sum(recovered)) %>% mutate(days = date - first(date) + 1)
# Extract specific country: Italy
italy <- country %>% filter(Country.Region=="Italy")
india <- country %>% filter(Country.Region=="India")
summary(country)
by(country$confirmed, country$Country.Region, summary)
by(country$cumconfirmed, country$Country.Region, summary)
by(country$deaths, country$Country.Region, summary)
by(country$recovered, country$Country.Region, summary)
summary(world)
summary(italy)
summary(india)
# World confirmed, deaths and recovered
str(world)
world %>% gather("Type", "Cases", -c(date, days)) %>%
ggplot(aes(x=date, y=Cases, colour=Type)) + geom_bar(stat="identity", width=0.2, fill="white") +
theme_classic() +
labs(title = "Covid-19 Global Cases", x= "Date", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# World confirmed
ggplot(world, aes(x=days, y=confirmed)) + geom_line() +
theme_classic() +
labs(title = "Covid-19 Global Confirmed Cases", x= "Days", y= "Daily confirmed cases") +
theme(plot.title = element_text(hjust = 0.5))
confirmedraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_confirmed_global.csv")
deathsraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_deaths_global.csv")
recoveredraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_recovered_global.csv")
library(tidyr)
library(dplyr)
confirmed <- confirmedraw %>% gather(key="date", value="confirmed", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(confirmed=sum(confirmed))
deaths <- deathsraw %>% gather(key="date", value="deaths", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(deaths=sum(deaths))
recovered <- recoveredraw %>% gather(key="date", value="recovered", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(recovered=sum(recovered))
summary(confirmed)
country <- full_join(confirmed, deaths) %>% full_join(recovered)
country$date <- country$date %>% sub("X", "", .) %>% as.Date("%m.%d.%y")
# Create new variable: number of days
country <- country %>% group_by(Country.Region) %>% mutate(cumconfirmed=cumsum(confirmed), days = date - first(date) + 1)
world <- country %>% group_by(date) %>% summarize(confirmed=sum(confirmed), cumconfirmed=sum(cumconfirmed), deaths=sum(deaths), recovered=sum(recovered)) %>% mutate(days = date - first(date) + 1)
# Extract specific country: Italy
italy <- country %>% filter(Country.Region=="Italy")
india <- country %>% filter(Country.Region=="India")
summary(country)
by(country$confirmed, country$Country.Region, summary)
by(country$cumconfirmed, country$Country.Region, summary)
by(country$deaths, country$Country.Region, summary)
by(country$recovered, country$Country.Region, summary)
summary(world)
summary(italy)
summary(india)
# World confirmed, deaths and recovered
str(world)
world %>% gather("Type", "Cases", -c(date, days)) %>%
ggplot(aes(x=date, y=Cases, colour=Type)) + geom_bar(stat="identity", width=0.2, fill="white") +
theme_classic() +
labs(title = "Covid-19 Global Cases", x= "Date", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
shiny::runApp()
confirmedraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_confirmed_global.csv")
deathsraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_deaths_global.csv")
recoveredraw <- read.csv("C:/Users/munde/Documents/BIDMiniProject/time_series_covid19_recovered_global.csv")
library(tidyr)
library(dplyr)
library(ggplot2)
confirmed <- confirmedraw %>% gather(key="date", value="confirmed", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(confirmed=sum(confirmed))
deaths <- deathsraw %>% gather(key="date", value="deaths", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(deaths=sum(deaths))
recovered <- recoveredraw %>% gather(key="date", value="recovered", -c(Country.Region, Province.State, Lat, Long)) %>% group_by(Country.Region, date) %>% summarize(recovered=sum(recovered))
summary(confirmed)
country <- full_join(confirmed, deaths) %>% full_join(recovered)
country$date <- country$date %>% sub("X", "", .) %>% as.Date("%m.%d.%y")
# Create new variable: number of days
country <- country %>% group_by(Country.Region) %>% mutate(cumconfirmed=cumsum(confirmed), days = date - first(date) + 1)
world <- country %>% group_by(date) %>% summarize(confirmed=sum(confirmed), cumconfirmed=sum(cumconfirmed), deaths=sum(deaths), recovered=sum(recovered)) %>% mutate(days = date - first(date) + 1)
# Extract specific country: Italy
italy <- country %>% filter(Country.Region=="Italy")
india <- country %>% filter(Country.Region=="India")
summary(country)
by(country$confirmed, country$Country.Region, summary)
by(country$cumconfirmed, country$Country.Region, summary)
by(country$deaths, country$Country.Region, summary)
by(country$recovered, country$Country.Region, summary)
summary(world)
summary(italy)
summary(india)
# World confirmed, deaths and recovered
str(world)
world %>% gather("Type", "Cases", -c(date, days)) %>%
ggplot(aes(x=date, y=Cases, colour=Type)) + geom_bar(stat="identity", width=0.2, fill="white") +
theme_classic() +
labs(title = "Covid-19 Global Cases", x= "Date", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# World confirmed
ggplot(world, aes(x=days, y=confirmed)) + geom_line() +
theme_classic() +
labs(title = "Covid-19 Global Confirmed Cases", x= "Days", y= "Daily confirmed cases") +
theme(plot.title = element_text(hjust = 0.5))
# World confirmed with counts in log10 scale
ggplot(world, aes(x=days, y=confirmed)) + geom_line() +
theme_classic() +
labs(title = "Covid-19 Global Confirmed Cases", x= "Days", y= "Daily confirmed cases  (log scale)") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(trans="log10")
# Confirmed by country for select countries with counts in log10 scale
countryselection <- country %>% filter(Country.Region==c("US", "Italy", "China", "France", "United Kingdom", "Germany"))
ggplot(countryselection, aes(x=days, y=confirmed, colour=Country.Region)) + geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Confirmed Cases by Country", x= "Days", y= "Daily confirmed cases (log scale)") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(trans="log10")
# Matrix of line graphs of confirmed, deaths and recovered for select countries in log10 scale
str(countryselection)
countryselection %>% gather("Type", "Cases", -c(date, days, Country.Region)) %>%
ggplot(aes(x=days, y=Cases, colour=Country.Region)) + geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases by Country", x= "Days", y= "Daily cases (log scale)") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(trans="log10") +
facet_grid(rows=vars(Type))
runApp()
runApp()
